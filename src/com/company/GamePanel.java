/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company;

import com.company.exception.SudokuGeneratingException;
import com.company.asset.*;
import com.company.exception.IllegalInputException;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author ville
 */
public class GamePanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form GamePanel
     */

    private Grid grid;

    private Frame frame;
    private int hintsUsed = 0;

    private boolean hints = false, highlights = true;
    private Mode mode = Mode.WRITE;

    /**
     * Constructor
     */
    public GamePanel() {
        initComponents();
        generateEmptyGrid();

        addKeyListener(this);
        setFocusable(true);
    }

    /**
     * Gets the grid of this panel
     *
     * @return
     */
    public Grid getGrid() {
        return this.grid;
    }

    /**
     * Generates an empty grid
     */
    public void generateEmptyGrid() {
        this.grid = new Grid(this);
        grid.setLocked(true);
        repaint();
    }

    /**
     * Generates a grid with a specific difficulty
     * @param difficulty
     * @throws SudokuGeneratingException
     */
    public void generateNewGrid(Difficulty difficulty) throws SudokuGeneratingException {
        if (grid != null) {
            grid.empty(Type.ALL);
        }
        this.grid = new Grid(this);
        grid.generateSudoku(difficulty);
        repaint();
    }

    /**
     * Paints this panel
     *
     * @param g Graphics
     */
    protected void paintComponent(Graphics g) {
        // Paint the grid and all its components
        if (grid != null) {
            grid.paint(g);
        }
    }

    /**
     * Clear all the squares that are highlighted
     */
    public void clearHighlightedSquares() {
        for (Square square : grid.getSquares()) {
            square.setHighlighted(false);
        }

        repaint();
    }

    /**
     * Clear all the squares that are pressed
     */
    public void clearPressedSquares() {
        for (Square square : grid.getSquares()) {
            square.setPressed(false);
        }

        repaint();
    }

    /**
     * Clear all the squares that are marked
     */
    public void clearMarkedSquares() {
        for (Square square : grid.getSquares()) {
            square.setMarked(false);
        }
        repaint();
    }

    /**
     * Clear all the squares that are hovered
     */
    public void clearHoveredSquares() {
        for (Square square : grid.getSquares()) {
            square.setHovered(false);
        }
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Detects every time the mouse is moved inside of the panel
     *
     * @param evt
     */
    private void formMouseMoved(java.awt.event.MouseEvent evt) {
        // Loop through all the squares to check which square is currently hovered by the cursor

        for (Square square : grid.getSquares()) {
            // If its hovered, set hovered
            if (square.isHit(new Point(evt.getX(), evt.getY()))) {
                square.setHovered(true);
                break;
            } else {
                // If not hovered, set false
                square.setHovered(false);
            }

            // No need to keep looking for the square if its already been found
        }
        repaint();
    }

    /**
     * Detects every time the mouse if pressed inside of the panel
     *
     * @param evt
     */
    private void formMousePressed(java.awt.event.MouseEvent evt) {

        //  Clear all previous markings to mark new ones
        clearPressedSquares();
        clearMarkedSquares();
        clearHighlightedSquares();

        // Loop the squares to check which ones have been hit
        for (Square square : grid.getSquares()) {
            if (square.isHit(new Point(evt.getX(), evt.getY()))) {
                square.setPressed(true);

                /*
                Turn these off if highlight setting is off
                 */
                if (hints && !square.isLocked()) {
                    square.setNumber(grid.getSolution().get(square.getUniqueId()), false);
                    hintsUsed++;
                    if (hasWon()) {
                        doWinnerSettings();

                    }
                    break;
                }

                if (highlights) {

                    // Highlight all the squares that are linked with the one clicked (row, column and the box)
                    for (Square associatedSquare : square.getAssociatedSquares()) {
                        associatedSquare.setHighlighted(true);
                    }

                    // Mark all the squares with the same number as the one clicked
                    for (Square s : grid.getSquares()) {
                        if (s.getNumber() == square.getNumber() && s.getNumber() != 0) {
                            s.setMarked(true);
                        }
                    }
                }
                // No need to continue looking for the square if its already been found
                break;
            }
        }
        repaint();
    }

    /**
     * Set the Frame (parent) of this Panel. Used to access the frame
     * @param frame The frame
     */
    public void setFrame(Frame frame) {
        this.frame = frame;
    }

    /**
     * Gets the amount of hints used
     * @return
     */
    public int getHintsUsed() {
        return this.hintsUsed;
    }

    /**
     * Check if the player has won
     * @return true if won
     */
    private boolean hasWon() {
        return grid.isFilled() && !grid.hasErrors();
    }

    /**
     * Do things when the player has won
     */
    public void doWinnerSettings() {
        clearMarkedSquares();
        clearHighlightedSquares();
        clearHoveredSquares();
        clearPressedSquares();

        for (Square s : grid.getSquares()) {
            s.setLocked(true);
        }

        frame.getSettingsPanel().updateTableInfo();
        frame.getSettingsPanel().setInfoMessage("Congratulations! See the table on the right for more information regarding your game.");
        frame.getSettingsPanel().buttonSettings();

        hintsUsed = 0;
    }

    /**
     * Detects when the mouse exits the panel
     *
     * @param evt
     */
    private void formMouseExited(java.awt.event.MouseEvent evt) {
        // Removed the currently hovering square when exiting (stays blue otherwise)
        clearHoveredSquares();
    }

    /**
     * Enables hints
     * @param hints hints if true
     */
    protected void setHints(boolean hints) {
        this.hints = hints;
    }

    /**
     * Set the mode to write or note
     * @param selected write if true
     */
    protected void setMode(boolean selected) {
        if (selected) {
            mode = Mode.WRITE;
        } else {
            mode = Mode.NOTE;
        }
    }

    /**
     * Enable or disable highlights
     * @param highlights highlights on if true
     */
    protected void setHightlights(boolean highlights) {
        this.highlights = highlights;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    /**
     * Checks whenever a key is pressed.
     * @param e
     */
    @Override
    public void keyPressed(KeyEvent e) {

        clearMarkedSquares();

        for (Square square : getGrid().getSquares()) {
            if (square.isPressed() && !square.isLocked()) {
                try {
                    if (e.getKeyCode() >= 49 && e.getKeyCode() <= 57) {
                        if (mode == Mode.WRITE) {
                            square.setNumber(e.getKeyCode() - 48);

                            // Do markings if the mode is WRITE
                            for (Square s : getGrid().getSquares(square.getNumber())) {
                                s.setMarked(true);
                            }

                            // Won the game
                            if (hasWon()) {
                                doWinnerSettings();
                            }
                            // Repaint the markings
                            repaint();
                        } else {
                            square.setNote(e.getKeyCode() - 48);
                        }
                        // Delete number or all notes
                    } else if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                        square.setNumber(0, false);
                        square.clearNotes();
                    } else {
                        throw new IllegalInputException();
                    }
                } catch (IllegalInputException ex) {
                    frame.getSettingsPanel().setInfoMessage("Please input a number from 1 to 9 or use backspace (←) to remove a number!");
                }
            }

        }

        // If no Square is currently selected (pressed) then show all the squares that have the same number as the keypress
        if (getGrid().noPressed()) {
            for (Square s : getGrid().getSquares()) {
                if (s.getNumber() == e.getKeyCode() - 48 && s.getNumber() != 0) {
                    s.setMarked(!s.isMarked());
                } else {
                    // Deselect all that do not have the same number as the inputted number
                    if (s.isMarked()) {
                        s.setMarked(false);
                    }
                }
            }
            repaint();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
