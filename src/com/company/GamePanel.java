/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company;

import com.company.asset.*;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author ville
 */
public class GamePanel extends javax.swing.JPanel {

    /**
     * Creates new form GamePanel
     */
    // private Frame frame;
    
    /*
    public void setFrame(Frame frame) {
        this.frame = frame;
    }
    */

    // The grid that this Panel contains
    private Grid grid;

    public GamePanel() {
        initComponents();
        generateEmptyGrid();
    }

    /**
     * Gets the grid of this panel
     * @return
     */
    public Grid getGrid() {
        return this.grid;
    }
    
    public void generateEmptyGrid() {
        this.grid = new Grid(this);
        repaint();
    }

    public void generateNewGrid(Difficulty difficulty) {
        if (grid != null) grid.empty(Type.ALL);
        this.grid = new Grid(this);
        grid.fill();
        repaint();
    }

    /**
     * Paints this panel
     * @param g
     */
    protected void paintComponent(Graphics g) {
        // Paint the grid and all its components
        if (grid != null) grid.paint(g);
    }

    /**
     * Clear all the squares that are highlighted
     */
    public void clearHighlightedSquares() {
        for (Square square : grid.getSquares()) {
            square.setHighlighted(false);
        }

        repaint();
    }

    /**
     * Clear all the squares that are pressed
     */
    public void clearPressedSquares() {
        for (Square square : grid.getSquares()) {
            square.setPressed(false);
        }

        repaint();
    }

    public void addNotify() {
        super.addNotify();
        requestFocus();
    }

    /**
     * Clear all the squares that are marked
     */
    public void clearMarkedSquares() {
        for (Square square : grid.getSquares()) {
            square.setMarked(false);
        }
        repaint();
    }

    /**
     * Clear all the squares that are hovered
     */
    public void clearHoveredSquares() {
        for (Square square : grid.getSquares()) {
            square.setHovered(false);
        }
        repaint();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent e) {
                formMouseMoved(e);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent e) {
                formMouseExited(e);
            }
            public void mousePressed(java.awt.event.MouseEvent e) {
                formMousePressed(e);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Detects every time the mouse is moved inside of the panel
     * @param e
     */
    private void formMouseMoved(java.awt.event.MouseEvent e) {
        // Loop through all the squares to check which square is currently hovered by the cursor
        for (Square square : grid.getSquares()) {
            // If its hovered, set hovered
            if (square.isHit(new Point(e.getX(), e.getY()))) {
                square.setHovered(true);
                break;
            } else {
                // If not hovered, set false
                square.setHovered(false);
            }

            // No need to keep looking for the square if its already been found
        }
        repaint();
    }

    /**
     * Detects every time the mouse if pressed inside of the panel
     * @param e
     */
    private void formMousePressed(java.awt.event.MouseEvent e) {

        //  Clear all previous markings to mark new ones
        clearPressedSquares();
        clearMarkedSquares();
        clearHighlightedSquares();

        // Loop the squares to check which ones have been hit
        for (Square square : grid.getSquares()) {
            if (square.isHit(new Point(e.getX(), e.getY()))) {
                square.setPressed(true);

                /*
                Turn these off if highlight setting is off
                 */
                if (!highlights) break;

                // Highlight all the squares that are linked with the one clicked (row, column and the box)
                for (Square associatedSquare : square.getAssociatedSquares()) {
                    associatedSquare.setHighlighted(true);
                }

                // Mark all the squares with the same number as the one clicked
                for (Square s : grid.getSquares()) {
                    if (s.getNumber() == square.getNumber() && s.getNumber() != 0) {
                        s.setMarked(true);
                    }
                }

                // No need to continue looking for the square if its already been found
                break;
            }
        }
        repaint();
    }

    /**
     * Detects when the mouse exits the panel
     * @param e
     */
    private void formMouseExited(java.awt.event.MouseEvent e) {
        // Removed the currently hovering square when exiting (stays blue otherwise)
        clearHoveredSquares();
    }
    
    private boolean hints = false, highlights = true;
    private Mode mode = Mode.WRITE;

    protected void setHints(boolean hints) {
        this.hints = hints;
    }

    protected void setMode(boolean selected) {
        if (selected) mode = Mode.WRITE;
        else mode = Mode.NOTE;
    }

    protected void setHightlights(boolean highlights) {
        this.highlights = highlights;
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
