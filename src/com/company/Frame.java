/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company;

import com.company.assets.Mode;
import com.company.assets.Square;


import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;

/**
 * @author ville
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    private Mode mode;

    // Integer constants for keys
    private final int CONTROL = KeyEvent.VK_CONTROL;
    private final int S = KeyEvent.VK_S;

    private boolean controlPressed, sPressed;

    public Frame() {
        initComponents();

        init();
    }

    /**
     * Initialize vars related to JFrame
     */
    public void init() {
        // Set to middle of screen
        setLocationRelativeTo(null);

        // Set the background of the Frame
        getContentPane().setBackground(new Color(90, 90, 90));

        // Set default mode (write)
        mode = Mode.WRITE;

        // Remove title bar

        /*
        dispose();
        setUndecorated(true);
        pack();
        setVisible(true);
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel = new com.company.GamePanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
                gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 444, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
                gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 444, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(gamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Detects when a key is pressed
     * @param evt
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        /*
        Used to switch between note mode and write mode, if only one is down at a time it will turn false on release (see keyReleasedEvent)
         */
        if (evt.getKeyCode() == CONTROL) controlPressed = true;
        if (evt.getKeyCode() == S) sPressed = true;

        // If both are down switch mode
        if (sPressed && controlPressed) {
            if (mode == Mode.WRITE) mode = Mode.NOTE;
            else mode = Mode.WRITE;
        }

        // Clear all previous markings with every new press
        gamePanel.clearMarkedSquares();

        /*
         Loop through, to write the square must be empty, unlocked and the keypress must be between 1-9
         Check the currently activated mode
         */
        for (Square square : gamePanel.getGrid().getSquares()) {
            if (square.isPressed() && !square.isLocked()) {
                if (evt.getKeyCode() >= 49 && evt.getKeyCode() <= 57) {
                    if (mode == Mode.WRITE) {
                        square.setNumber(evt.getKeyCode() - 48, false);
                        // Do markings if the mode is WRITE
                        for (Square s : gamePanel.getGrid().getSquares()) {
                            if (s.getNumber() == square.getNumber()) s.setMarked(true);
                        }
                        // Repaint the markings
                        repaint();
                    } else {
                        square.setNote(evt.getKeyCode() - 48);
                    }
                    // Delete number or all notes
                } else if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                    square.setNumber(0, false);
                    square.clearNotes();
                }
            }

        }

        // If no Square is currently selected (pressed) then show all the squares that have the same number as the keypress
        if (gamePanel.getGrid().noPressed()) {
            for (Square s : gamePanel.getGrid().getSquares()) {
                if (s.getNumber() == evt.getKeyCode() - 48 && s.getNumber() != 0) {
                    s.setMarked(!s.isMarked());
                } else {
                    // Deselect all that do not have the same number as the inputted number
                    if (s.isMarked()) s.setMarked(false);
                }
            }
            repaint();
        }
    }

    /**
     * Detects when a key is released
     *
     * @param evt
     */
    private void formKeyReleased(java.awt.event.KeyEvent evt) {

        /*
        Used to switch between note mode or write mode
         */
        if (evt.getKeyCode() == CONTROL) controlPressed = false;
        if (evt.getKeyCode() == S) sPressed = false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.company.GamePanel gamePanel;
    // End of variables declaration//GEN-END:variables
}
