/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company;

import com.company.exception.SudokuGeneratingException;
import com.company.asset.Difficulty;
import com.company.asset.Type;
import com.company.util.Util;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;

/**
 * @author ville
 */
public class SettingsPanel extends javax.swing.JPanel {

    private Frame frame;

    private final Color ON = new Color(140, 255, 90);
    private final Color OFF = new Color(255, 100, 100);
    private final Color WRITE = new Color(145, 180, 230);
    private final Color NOTE = new Color(195, 215, 250);

    private Difficulty difficulty;

    public SettingsPanel() {
        initComponents();

        init();
    }

    /**
     * Sets the frame of this panel
     *
     * @param frame the frame
     */
    public void setFrame(Frame frame) {
        this.frame = frame;
    }

    /**
     * Initiate all the vars
     */
    public void init() {

        btnToggleHint.setBackground(OFF);
        btnToggleHighlights.setSelected(true);
        btnToggleHighlights.setBackground(ON);
        btnToggleMode.setSelected(true);
        btnToggleMode.setBackground(WRITE);

        Hashtable<Integer, JLabel> hashtable = new Hashtable();

        hashtable.put(0, new JLabel("Easy"));
        hashtable.put(50, new JLabel("Medium"));
        hashtable.put(100, new JLabel("Hard"));

        sliderDifficulty.setMajorTickSpacing(50);
        sliderDifficulty.setSnapToTicks(true);
        sliderDifficulty.setLabelTable(hashtable);
        sliderDifficulty.setPaintLabels(true);

        buttonSettings();

        table.setAutoCreateRowSorter(true);
        table.getTableHeader().setReorderingAllowed(false);

        txtMessage.setEditable(false);
    }

    /**
     * Do the button settings
     */
    public void buttonSettings() {
        btnSolve.setEnabled(false);
        btnClear.setEnabled(false);
        btnToggleHighlights.setEnabled(false);
        btnToggleHint.setEnabled(false);
        btnToggleMode.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        panelSettings = new javax.swing.JPanel();
        btnToggleHighlights = new javax.swing.JToggleButton();
        btnToggleHint = new javax.swing.JToggleButton();
        btnToggleMode = new javax.swing.JToggleButton();
        lblMode = new javax.swing.JLabel();
        lblHints = new javax.swing.JLabel();
        lblHighlights = new javax.swing.JLabel();
        panelActions = new javax.swing.JPanel();
        sliderDifficulty = new javax.swing.JSlider();
        btnGenerate = new javax.swing.JButton();
        btnSolve = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        separator = new javax.swing.JSeparator();
        panelInfo = new javax.swing.JPanel();
        txtMessage = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(650, 450));

        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "ID", "Difficulty", "Time", "Hints"
                }
        ));
        jScrollPane1.setViewportView(table);

        panelSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N
        panelSettings.setToolTipText("");
        panelSettings.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N

        btnToggleHighlights.setText("ON");
        btnToggleHighlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToggleHighlightsActionPerformed(evt);
            }
        });

        btnToggleHint.setText("OFF");
        btnToggleHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToggleHintActionPerformed(evt);
            }
        });

        btnToggleMode.setText("WRITE");
        btnToggleMode.setMaximumSize(new java.awt.Dimension(60, 32));
        btnToggleMode.setMinimumSize(new java.awt.Dimension(60, 32));
        btnToggleMode.setPreferredSize(new java.awt.Dimension(60, 32));
        btnToggleMode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnToggleModeMouseClicked(evt);
            }
        });

        lblMode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMode.setText("Mode");

        lblHints.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHints.setText("Hints");

        lblHighlights.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHighlights.setText("Highlights");

        javax.swing.GroupLayout panelSettingsLayout = new javax.swing.GroupLayout(panelSettings);
        panelSettings.setLayout(panelSettingsLayout);
        panelSettingsLayout.setHorizontalGroup(
                panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSettingsLayout.createSequentialGroup()
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelSettingsLayout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(lblMode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelSettingsLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(btnToggleMode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelSettingsLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblHints, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(panelSettingsLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(btnToggleHint, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)))
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblHighlights, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                        .addComponent(btnToggleHighlights, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10))
        );
        panelSettingsLayout.setVerticalGroup(
                panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelSettingsLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblMode)
                                        .addComponent(lblHints)
                                        .addComponent(lblHighlights))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                                        .addComponent(btnToggleHighlights, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnToggleMode, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnToggleHint, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        panelActions.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Actions\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N
        panelActions.setPreferredSize(new java.awt.Dimension(250, 200));

        btnGenerate.setText("New Sudoku");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnSolve.setText("Solve");
        btnSolve.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSolveMouseClicked(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelActionsLayout = new javax.swing.GroupLayout(panelActions);
        panelActions.setLayout(panelActionsLayout);
        panelActionsLayout.setHorizontalGroup(
                panelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(separator, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelActionsLayout.createSequentialGroup()
                                .addContainerGap(52, Short.MAX_VALUE)
                                .addGroup(panelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelActionsLayout.createSequentialGroup()
                                                .addGroup(panelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(btnSolve, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(73, 73, 73))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelActionsLayout.createSequentialGroup()
                                                .addComponent(sliderDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(53, 53, 53))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelActionsLayout.createSequentialGroup()
                                                .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(72, 72, 72))))
        );
        panelActionsLayout.setVerticalGroup(
                panelActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelActionsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(sliderDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnGenerate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSolve)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)
                                .addContainerGap(9, Short.MAX_VALUE))
        );

        panelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Information\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N
        panelInfo.setPreferredSize(new java.awt.Dimension(610, 50));

        txtMessage.setMinimumSize(new java.awt.Dimension(14, 30));

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
                panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelInfoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(txtMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                                .addContainerGap())
        );
        panelInfoLayout.setVerticalGroup(
                panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(panelSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(panelActions, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(20, 20, 20)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(panelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(panelActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(20, 20, 20)
                                                .addComponent(panelSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(20, 20, 20)
                                .addComponent(panelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Check when hint button is pressed
     *
     * @param evt
     */
    private void btnToggleHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToggleHintActionPerformed
        // TODO add your handling code here:
        frame.getGamePanel().setHints(btnToggleHint.isSelected());

        if (btnToggleHint.isSelected()) {
            btnToggleHint.setText("ON");
            btnToggleHint.setBackground(ON);
        } else {
            btnToggleHint.setText("OFF");
            btnToggleHint.setBackground(OFF);
        }

        removeFocus();

    }//GEN-LAST:event_btnToggleHintActionPerformed


    /**
     * Check when highlight button is pressed
     *
     * @param evt
     */

    private void btnToggleHighlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToggleHighlightsActionPerformed
        // TODO add your handling code here:
        frame.getGamePanel().setHightlights(btnToggleHighlights.isSelected());

        if (btnToggleHighlights.isSelected()) {
            btnToggleHighlights.setText("ON");
            btnToggleHighlights.setBackground(ON);
        } else {
            btnToggleHighlights.setText("OFF");
            btnToggleHighlights.setBackground(OFF);
        }
        removeFocus();
    }//GEN-LAST:event_btnToggleHighlightsActionPerformed


    /**
     * Check when mode button is pressed
     *
     * @param evt
     */

    private void btnToggleModeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnToggleModeMouseClicked
        // TODO add your handling code here:
        frame.getGamePanel().setMode(btnToggleMode.isSelected());

        if (btnToggleMode.isSelected()) {
            btnToggleMode.setText("WRITE");
            btnToggleMode.setBackground(WRITE);
        } else {
            btnToggleMode.setText("NOTE");
            btnToggleMode.setBackground(NOTE);
        }
        removeFocus();
    }//GEN-LAST:event_btnToggleModeMouseClicked


    /**
     * Check when solve button is pressed
     *
     * @param evt
     */

    private void btnSolveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSolveMouseClicked
        // TODO add your handling code here:
        frame.getGamePanel().getGrid().empty(Type.INPUTS);
        frame.getGamePanel().getGrid().normalSolve(true);
        removeFocus();
    }//GEN-LAST:event_btnSolveMouseClicked

    /**
     * Check when clear button is pressed
     *
     * @param evt
     */

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked
        // TODO add your handling code here:
        frame.getGamePanel().getGrid().empty(Type.INPUTS);
        removeFocus();
    }//GEN-LAST:event_btnClearMouseClicked

    /**
     * Check when generate button is pressed
     *
     * @param evt
     */

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        // TODO add your handling code here:

        long startTime = System.nanoTime();
        difficulty = Difficulty.EASY;
        switch (sliderDifficulty.getValue()) {
            case 0:
                difficulty = Difficulty.EASY;
                break;
            case 50:
                difficulty = Difficulty.MEDIUM;
                break;
            case 100:
                difficulty = Difficulty.HARD;
                break;
        }

        try {
            frame.getGamePanel().generateNewGrid(difficulty);
        } catch (SudokuGeneratingException e) {
            setInfoMessage("Something went wrong when generating Sudoku, please try again!");
            frame.getGamePanel().getGrid().empty(Type.ALL);
            frame.getGamePanel().getGrid().setLocked(true);
            return;
        }

        long finalTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);

        btnSolve.setEnabled(true);
        btnClear.setEnabled(true);
        btnToggleHighlights.setEnabled(true);
        btnToggleHint.setEnabled(true);
        btnToggleMode.setEnabled(true);

        setInfoMessage("Succesfully generated " + difficulty.toString().toLowerCase() + " Sudoku in " + finalTime + " ms.");

        removeFocus();
    }//GEN-LAST:event_btnGenerateActionPerformed


    /**
     * Removes all the focuses from all the other components other than the Game panel to enable user key inputs
     */

    private void removeFocus() {
        btnToggleHint.setFocusable(false);
        btnToggleHighlights.setFocusable(false);
        btnToggleMode.setFocusable(false);
        btnGenerate.setFocusable(false);
        btnSolve.setFocusable(false);
        btnClear.setFocusable(false);
        jScrollPane1.setFocusable(false);
        lblHighlights.setFocusable(false);
        lblHints.setFocusable(false);
        lblMode.setFocusable(false);
        panelActions.setFocusable(false);
        panelSettings.setFocusable(false);
        panelInfo.setFocusable(false);
        txtMessage.setFocusable(false);
        separator.setFocusable(false);
        sliderDifficulty.setFocusable(false);
        table.setFocusable(false);
    }

    /**
     * Sets the info message
     *
     * @param message The message
     */
    public void setInfoMessage(String message) {
        txtMessage.setText("");
        String[] words = message.split(" ");
        for (int i = 0; i < words.length; i++) {
            txtMessage.setText(txtMessage.getText() + " " + words[i]);
        }

    }

    /**
     * Update the table
     */
    public void updateTableInfo() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        List<String> list = new ArrayList<>();

        long totalTime = TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - frame.getGamePanel().getGrid().getStartTime());

        long seconds = totalTime % 60;
        long minutes = (totalTime % 3600) / 60;
        long hours = minutes / 3600;

        list.add(String.valueOf(table.getRowCount()));
        list.add(difficulty.toString());
        list.add(String.format("%02d:%02d:%02d", hours, minutes, seconds));
        list.add(String.valueOf(frame.getGamePanel().getHintsUsed()));

        model.addRow(list.toArray());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnSolve;
    private javax.swing.JToggleButton btnToggleHighlights;
    private javax.swing.JToggleButton btnToggleHint;
    private javax.swing.JToggleButton btnToggleMode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHighlights;
    private javax.swing.JLabel lblHints;
    private javax.swing.JLabel lblMode;
    private javax.swing.JPanel panelActions;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JSeparator separator;
    private javax.swing.JSlider sliderDifficulty;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

}
